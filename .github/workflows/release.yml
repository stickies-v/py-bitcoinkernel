name: Release
on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+*'  # Matches vX.Y.Z with optional suffix

jobs:
  build-lib:
    strategy:
      matrix:
        include:
          # Linux builds
          - os: ubuntu-24.04
            container: quay.io/pypa/manylinux_2_28_x86_64
            arch: x86_64
            platform: manylinux
            cmake_args: '-DBITCOIN_TARGET=x86_64-linux-gnu'

          - os: ubuntu-24.04
            container: quay.io/pypa/musllinux_1_2_x86_64
            arch: x86_64
            platform: musllinux
            cmake_args: '-DBITCOIN_TARGET=x86_64-linux-gnu'

          # Windows build
          - os: ubuntu-24.04
            arch: AMD64
            platform: win
            cmake_args: '-DBITCOIN_TARGET=x86_64-w64-mingw32'
            deps_cmd: sudo apt-get update -y && sudo apt-get install g++-mingw-w64-x86-64-posix

          # macOS builds
          - os: macos-latest
            arch: x86_64
            platform: macosx
            cmake_args: '-DCMAKE_OSX_ARCHITECTURES=x86_64 -DCMAKE_OSX_DEPLOYMENT_TARGET=13.0'
            deps_cmd: brew install boost

          - os: macos-latest
            arch: arm64
            platform: macosx
            cmake_args: '-DCMAKE_OSX_ARCHITECTURES=arm64 -DCMAKE_OSX_DEPLOYMENT_TARGET=13.0'
            deps_cmd: brew install boost

    runs-on: ${{ matrix.os }}
    container: ${{ matrix.container }}
    env:
      BUILD_PATH: build/_libs
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Restore bitcoinkernel from cache
        id: cache-lib
        uses: actions/cache/restore@v4
        with:
          path: ${{ env.BUILD_PATH }}
          key: bitcoinkernel-${{ matrix.platform }}_${{ matrix.arch }}-${{ hashFiles('depend/bitcoin/**', 'CMakeLists.txt') }}

      - name: Install dependencies
        if: steps.cache-lib.outputs.cache-hit != 'true' && matrix.deps_cmd != ''
        run: ${{ matrix.deps_cmd }}

      - name: Build bitcoinkernel lib
        if: steps.cache-lib.outputs.cache-hit != 'true'
        run: |
          cmake -B build ${{ matrix.cmake_args }}
          cmake --build build -j
          cmake --install build

      - name: Save lib cache
        if: steps.cache-lib.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: ${{ env.BUILD_PATH }}
          key: ${{ steps.cache-lib.outputs.cache-primary-key}}

      - name: Upload Binary
        uses: actions/upload-artifact@v4
        with:
          name: bitcoinkernel-${{ matrix.platform }}_${{ matrix.arch }}
          path: ${{ env.BUILD_PATH }}/*
          if-no-files-found: error

  build-wheels:
    needs: [build-lib]
    strategy:
      matrix:
        platform_config:
          - platform: 'win'
            arch: 'AMD64'
            os: 'windows-latest'
          - platform: 'macosx'
            arch: 'arm64'
            os: 'macos-latest'
          - platform: 'macosx'
            arch: 'x86_64'
            os: 'macos-latest'
          - platform: 'manylinux'
            arch: 'x86_64'
            os: 'ubuntu-latest'
          - platform: 'musllinux'
            arch: 'x86_64'
            os: 'ubuntu-latest'
    runs-on: ${{ matrix.platform_config.os }}
    env:
      PLATFORM_TAG: ${{ matrix.platform_config.platform }}_${{ matrix.platform_config.arch }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download lib
        uses: actions/download-artifact@v4
        with:
          name: bitcoinkernel-${{ env.PLATFORM_TAG }}
          path: build/_libs

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.22
        env:
          CIBW_BUILD: "cp310-${{ env.PLATFORM_TAG }} cp311-${{ env.PLATFORM_TAG }} cp312-${{ env.PLATFORM_TAG }} cp313-${{ env.PLATFORM_TAG }}"
          CIBW_ARCHS: "${{ matrix.platform_config.arch }}"
          CIBW_ENVIRONMENT: "BITCOINKERNEL_LIB=build/_libs/*bitcoinkernel*"
          MACOSX_DEPLOYMENT_TARGET: 13.0
          CIBW_MANYLINUX_X86_64_IMAGE: "manylinux_2_28"
          CIBW_MUSLLINUX_X86_64_IMAGE: "musllinux_1_2"

      - name: Upload Wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ env.PLATFORM_TAG }}
          path: wheelhouse/*.whl

  build-sdist:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Build SDist
        run: |
          python -m pip install build
          python -m build --sdist

      - name: Test SDist
        run: |
          sudo apt-get update -y
          sudo apt-get install -y libboost-dev
          python -m pip install dist/*.tar.gz pytest
          pytest

      - name: Upload SDist
        uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: dist/*.tar.gz

  publish-pypi:
    needs: [build-wheels, build-sdist]
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/py-bitcoinkernel
    permissions:
      id-token: write

    steps:
      - name: Download all wheels
        uses: actions/download-artifact@v4
        with:
          pattern: wheels-*
          path: dist
          merge-multiple: true

      - name: Download SDist
        uses: actions/download-artifact@v4
        with:
          name: sdist
          path: dist

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
